{"version":3,"sources":["index.js"],"names":["require","config","Weather","props","changeState","event","setState","city","target","value","getWeather","a","preventDefault","showHis","state","console","log","axios","get","process","response","weather","data","post","showHistory","history","onSubmit","this","htmlFor","type","id","onChange","name","main","temp","temp_min","temp_max","pressure","humidity","wind","speed","deg","visibility","onClick","length","map","Name","CurTemp","MinTemp","MaxTemp","Pressure","Humidity","WindSpd","WindDeg","Visibility","React","Component","ReactDOM","render","document","getElementById"],"mappings":"uNAKAA,EAAQ,IAAUC,S,IAGZC,E,kDAGJ,WAAYC,GACX,IAAD,8BACE,cAAMA,IAYRC,YAAc,SAACC,GAEb,EAAKC,SAAS,CAACC,KAAMF,EAAMG,OAAOC,SAfpC,EAmBAC,WAnBA,uCAmBa,WAAOL,GAAP,iBAAAM,EAAA,6DAEXN,EAAMO,iBACN,EAAKN,SAAS,CAACO,QAAQ,IACnBN,EAAO,EAAKO,MAAMP,KACtBQ,QAAQC,IAAIT,GALD,SAMUU,IAAMC,IAAN,4DAA+DX,EAA/D,kBAA6EY,qCANvF,cAMPC,EANO,OAOX,EAAKd,SAAS,CAACe,QAAQD,EAASE,OAPrB,UASLL,IAAMM,KAAN,wCAAmDH,EAASE,MATvD,4CAnBb,wDAgCAE,YAhCA,sBAgCc,4BAAAb,EAAA,6DAEZI,QAAQC,IAAR,yCAFY,SAGWC,IAAMC,IAAN,yCAHX,OAGNE,EAHM,OAIZ,EAAKd,SAAS,CAACmB,QAAQL,EAASE,OAChC,EAAKhB,SAAS,CAACO,QAAS,IALZ,2CA7BZ,EAAKC,MACL,CACEP,KAAS,GACTc,QAAU,GACVI,QAAU,GACVZ,QAAU,GARd,E,0CAwCA,WAEE,OACE,gCACA,uBAAMa,SAAYC,KAAKjB,WAAvB,UACE,uBAAOkB,QAAU,OAAjB,6BACA,uBAAOC,KAAO,OAAOC,GAAK,OAAOC,SAAUJ,KAAKvB,cAChD,wBAAQyB,KAAK,SAAb,uBAGDF,KAAKb,MAAMO,QAAQW,KAElB,gCACA,6BAAKL,KAAKb,MAAMO,QAAQW,OACxB,uDAA0BL,KAAKb,MAAMO,QAAQY,KAAKC,KAAlD,OACA,4CAAeP,KAAKb,MAAMO,QAAQY,KAAKE,SAAvC,OACA,4CAAeR,KAAKb,MAAMO,QAAQY,KAAKG,SAAvC,OACA,4CAAeT,KAAKb,MAAMO,QAAQY,KAAKI,YACvC,4CAAeV,KAAKb,MAAMO,QAAQY,KAAKK,YACvC,+CAAkBX,KAAKb,MAAMO,QAAQkB,KAAKC,MAA1C,aAA2Db,KAAKb,MAAMO,QAAQkB,KAAKE,OACnF,8CAAiBd,KAAKb,MAAMO,QAAQqB,iBAGpC,KAEF,wBAAQb,KAAK,SAASc,QAAShB,KAAKH,YAApC,qBACCG,KAAKb,MAAMD,QAEV,mCACCc,KAAKb,MAAMW,QAAQmB,OAAO,EAE3B,qCACA,yCACCjB,KAAKb,MAAMW,QAAQoB,KAAI,SAACtC,GAAD,OAEtB,gCACA,wCAAWA,EAAKuC,QAChB,wDAA2BvC,EAAKwC,QAAhC,OACA,6CAAgBxC,EAAKyC,QAArB,OACA,6CAAgBzC,EAAK0C,QAArB,OACA,6CAAgB1C,EAAK2C,YACrB,6CAAgB3C,EAAK4C,YACrB,gDAAmB5C,EAAK6C,QAAxB,aAA2C7C,EAAK8C,WAChD,+CAAkB9C,EAAK+C,cACvB,uBACA,gCAKF,uDAIA,Y,GAlGcC,IAAMC,WAwG5BC,IAASC,OAAO,cAACxD,EAAD,IAAayD,SAASC,eAAe,W","file":"static/js/main.d5743dd7.chunk.js","sourcesContent":["\n//importing the required libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from \"axios\";\nrequire('dotenv').config();\n\n//creating a class Component Weather to manage the frontend\nclass Weather extends React.Component\n{\n  //constructor for initialising\n  constructor(props)\n  {\n    super(props);\n    \n    this.state = \n    { \n      city    :\"\",  //for storing the city to be searched\n      weather : [], //for storing the fetched weather for the selected city\n      history : [], //for storing the search history retrieved from database\n      showHis : 0   //for making the history visible or invisible\n    };\n  }\n  \n  //changing the state variable city to the user input\n  changeState = (event) =>\n  {\n    this.setState({city: event.target.value});\n  }\n\n  //fetching the weather for the selected city\n  getWeather = async (event) =>\n  {\n    event.preventDefault(); //preventing default form submission\n    this.setState({showHis:0}); //making the history section as invisble\n    var city = this.state.city;\n    console.log(city);\n    var response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_WEATHER}`); //storing the weather in response variable\n    this.setState({weather:response.data}); //changing the state variable weather to store the fetched response data\n       \n    await axios.post(`https://weathry.herokuapp.com/weather`,response.data); //sending the fetched weather to the server for storing in database and waiting for confirmation\n  }\n\n  //displaying the history of searches\n  showHistory = async () =>\n  {\n    console.log(`https://weathry.herokuapp.com/history`);\n    const response = await axios.get(`https://weathry.herokuapp.com/history`); //storing the records fetched from database to response\n    this.setState({history:response.data}); //changing the state variable history to store the response data\n    this.setState({showHis: 1}); //to make the history section visible\n  }   \n\n  render()\n  {\n    return (\n      <div>\n      <form onSubmit = {this.getWeather}>\n        <label htmlFor = \"City\">Enter City name</label>\n        <input type = \"text\" id = \"City\" onChange={this.changeState}></input>\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      {this.state.weather.name ?\n      (\n        <div>\n        <h1>{this.state.weather.name}</h1>\n        <h3>Current Temperature: {this.state.weather.main.temp}K</h3>\n        <h3>Min Temp: {this.state.weather.main.temp_min}K</h3>\n        <h3>Max Temp: {this.state.weather.main.temp_max}K</h3>\n        <h3>Pressure: {this.state.weather.main.pressure}</h3>\n        <h3>Humidity: {this.state.weather.main.humidity}</h3>\n        <h3>Wind: Speed- {this.state.weather.wind.speed}, Degree- {this.state.weather.wind.deg}</h3>\n        <h3>Visibility: {this.state.weather.visibility}</h3>\n        </div>\n      \n      ):null}\n      \n      <button type=\"button\" onClick={this.showHistory}>HISTORY</button>\n      {this.state.showHis ? \n      (\n        <>\n        {this.state.history.length>0 ?\n      (\n        <>\n        <h1>HISTORY</h1>\n        {this.state.history.map((city) =>\n        (\n          <div>\n          <h3>City: {city.Name}</h3>\n          <div>Current Temperature: {city.CurTemp}K</div>\n          <div>Min Temp: {city.MinTemp}K</div>\n          <div>Max Temp: {city.MaxTemp}K</div>\n          <div>Pressure: {city.Pressure}</div>\n          <div>Humidity: {city.Humidity}</div>\n          <div>Wind: Speed- {city.WindSpd}, Degree- {city.WindDeg}</div>\n          <div>Visibility: {city.Visibility}</div>\n          <br></br>\n          <br></br>\n          </div>\n        ))}\n        </>\n      )\n      : <div> HISTORY IS EMPTY </div>}\n        \n        </>\n\n      ):null}\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Weather />, document.getElementById('root'));"],"sourceRoot":""}